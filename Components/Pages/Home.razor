@page "/"
@using BarraldevDownloader.Services

<PageTitle>Barral.dev Downloader</PageTitle>

<div class="container-lg mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-8 col-sm-10">
            <div class="text-center shadow-lg rounded bg-white border border-secondary p-4">
                <h1 class="display-6 mt-3 text-black" style="text-shadow: 2px 2px 4px">
                    <strong>
                        Download de Mídia do YouTube
                    </strong>
                </h1>
                <p class="text-muted">Insira o link do vídeo que deseja baixar:</p>

                <div class="mt-4 w-75 m-auto">
                    <input @bind="videoUrl" type="text" class="form-control border-secondary" placeholder="Cole o link do YouTube aqui..." />
                </div>

                <div class="d-flex gap-3 justify-content-center m-3 flex-wrap">
                    <button class="btn btn-dark shadow-sm" @onclick="DownloadAudio" disabled="@isLoading">
                        <i class="bi bi-music-note"></i> Baixar Música
                    </button>
                    <button class="btn btn-danger shadow-sm" @onclick="DownloadVideo" disabled="@isLoading">
                        <i class="bi bi-camera-video"></i> Baixar Vídeo
                    </button>
                </div>

                @if (isLoading)
                {
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Carregando...</span>
                    </div>
                    <p class="mt-2" style="color: #0669e4; font-weight: bold; font-size: 18px">Aguarde, estamos processando seu download...</p>
                }

                @if (!string.IsNullOrEmpty(downloadMessage))
                {
                    <p class="mt-3 @(isError ? "text-error" : "text-success")">@downloadMessage</p>
                }

                <p class="mt-3 text-black w-75 m-auto">
                    Esta aplicação permite downloads de músicas e vídeos através de links do YouTube de maneira simples e prática.
                </p>
            </div>
        </div>
    </div>
</div>

@code {
    private string videoUrl = string.Empty;
    private string downloadMessage = string.Empty;
    private bool isError;
    private bool isLoading = false;

    [Inject]
    private DownloadService DownloadService { get; set; } // Injeta o serviço de download

    private async Task DownloadVideo()
    {
        if (string.IsNullOrEmpty(videoUrl))
        {
            downloadMessage = "Por favor, insira um link válido.";
            isError = true;
            await ShowTemporaryMessage();
            return;
        }

        isLoading = true;
        try
        {
            var filePath = await DownloadService.DownloadVideoAsync(videoUrl);
            downloadMessage = $"Vídeo baixado com sucesso em: {filePath}.";
            isError = false;
        }
        catch (Exception ex)
        {
            downloadMessage = $"Erro ao baixar vídeo: {ex.Message}";
            isError = true;
        }
        finally
        {
            isLoading = false;
            await ShowTemporaryMessage();
        }
    }

    private async Task DownloadAudio()
    {
        if (string.IsNullOrEmpty(videoUrl))
        {
            downloadMessage = "Por favor, insira um link válido.";
            isError = true;
            await ShowTemporaryMessage();
            return;
        }

        isLoading = true;
        try
        {
            var filePath = await DownloadService.DownloadAudioAsync(videoUrl);
            downloadMessage = $"Áudio baixado com sucesso em: {filePath}.";
            isError = false;
        }
        catch (Exception ex)
        {
            downloadMessage = $"Erro ao baixar áudio: {ex.Message}";
            isError = true;
        }
        finally
        {
            isLoading = false;
            await ShowTemporaryMessage();
        }
    }

    private async Task ShowTemporaryMessage()
    {
        StateHasChanged();
        await Task.Delay(5000);
        downloadMessage = string.Empty;
        StateHasChanged();
    }
}
